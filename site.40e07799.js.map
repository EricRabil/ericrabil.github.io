{"version":3,"sources":["scripts/site.js"],"names":["Array","from","array","newArray","i","length","push","_has_grid","CSS","supports","_display_mode","document","body","classList","add","resetPageView","suite","textViews","style","display","resetNavButtons","navButtons","remove","hiddenResponsiveState","didRunCompatibilityModeForSession","didDoInitialNavbarClose","page","getElementById","displayFromElement","element","dataset","pageTarget","textViewTitle","innerText","init","navButton","addEventListener","event","navCollapseButton","navIsCollapsed","window","reflow","viewportWidth","shouldUseCompatibilityMode","console","debug","setTimeout","collapsed","hidden","textView","getElementsByName","children","innerWidth","test","navigator","userAgent","MimicoShell"],"mappings":"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","file":"site.40e07799.js","sourceRoot":"../Mimico","sourcesContent":["if (!Array.from) {\n    Array.from = (array) => {\n        const newArray = [];\n        for (let i = 0; i < array.length; i++) {\n            newArray.push(array[i]);\n        }\n        return newArray;\n    };\n}\nconst _has_grid = CSS.supports(\"display\", \"grid\");\nconst _display_mode = _has_grid ? \"grid\" : \"flex\";\nif (!_has_grid) {\n    document.body.classList.add(\"no-grid\");\n}\n(() => {\n    const resetPageView = () => {\n        for (let view of suite.textViews) {\n            view.style.display = \"none\";\n        }\n    }\n    const resetNavButtons = () => {\n        for (let view of suite.navButtons) {\n            view.classList.remove(\"secondary-active\");\n        }\n    }\n    const resetResponsiveNav = () => {\n        suite.navIsCollapsed = suite.viewportWidth < 750;\n    }\n    const toggleExplorer = (hidden) => document.getElementById(\"explorer\").style.display = hidden ? \"none\" : _display_mode;\n    let hiddenResponsiveState = false;\n    let didRunCompatibilityModeForSession = false;\n    let didDoInitialNavbarClose = false;\n    const suite = {\n        /**\n         * Switch to a given page\n         * @param {string} page page id\n         */\n        display(page) {\n            resetPageView();\n            document.getElementById(page).style.display = _display_mode;\n        },\n        /**\n         * Display a page using a navbar element\n         * @param {Element} element \n         */\n        displayFromElement(element) {\n            this.display(element.dataset.pageTarget);\n            resetNavButtons();\n            element.classList.add(\"secondary-active\");\n            this.textViewTitle.innerText = element.innerText;\n        },\n        init() {\n            resetPageView();\n            resetNavButtons();\n            this.displayFromElement(this.navButtons[0]);\n            for (let navButton of this.navButtons) {\n                navButton.addEventListener(\"click\", event => this.displayFromElement(navButton));\n            }\n            this.navCollapseButton.addEventListener(\"click\", () => {\n                this.navIsCollapsed = !this.navIsCollapsed;\n                hiddenResponsiveState = this.navIsCollapsed;\n            });\n            window.addEventListener(\"resize\", () => this.reflow());\n            this.reflow();\n        },\n        reflow() {\n            if (this.viewportWidth >= 750) {\n                if (this.navIsCollapsed) {\n                    this.navIsCollapsed = false;\n                }\n                didRunCompatibilityModeForSession = false;\n                didDoInitialNavbarClose = false;\n            }\n            if (!this.navIsCollapsed && this.viewportWidth < 750) {\n                if (!didDoInitialNavbarClose) {\n                    this.navIsCollapsed = true;\n                    didDoInitialNavbarClose = true;\n                }\n                if (hiddenResponsiveState) {\n                    this.navIsCollapsed = true;\n                }\n                if (this.shouldUseCompatibilityMode && !didRunCompatibilityModeForSession) {\n                    console.debug(\"Running compatibility reflow\");\n                    this.navIsCollapsed = !this.navIsCollapsed;\n                    setTimeout(() => this.navIsCollapsed = !this.navIsCollapsed, 0);\n                    didRunCompatibilityModeForSession = true;\n                }\n            }\n        },\n        get navIsCollapsed() {\n            return document.getElementById(\"explorer\").style.display === \"none\";\n        },\n        set navIsCollapsed(collapsed) {\n            toggleExplorer(collapsed);\n            this.textView.classList[collapsed ? \"add\" : \"remove\"](\"text-view-max\");\n        },\n        get textViews() {\n            return Array.from(document.getElementsByName(\"text-view\"));\n        },\n        get navButtons() {\n            return Array.from(document.getElementById(\"explorer-items\").children);\n        },\n        get textViewTitle() {\n            return document.getElementById(\"tvt-wrap\");\n        },\n        get textView() {\n            return document.getElementById(\"text-view\");\n        },\n        get viewportWidth() {\n            return window.innerWidth;\n        },\n        get navCollapseButton() {\n            return document.getElementById(\"nav-burger\");\n        },\n        get shouldUseCompatibilityMode() {\n            return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n        }\n    };\n    window.MimicoShell = suite;\n    suite.init();\n})();"]}