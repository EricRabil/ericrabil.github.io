{"version":3,"sources":["scripts/site.js"],"names":["Array","from","array","newArray","i","length","push","_has_grid","CSS","supports","_display_mode","document","body","classList","add","resetPageView","suite","textViews","view","style","display","resetNavButtons","navButtons","remove","resetResponsiveNav","navIsCollapsed","viewportWidth","toggleExplorer","hidden","getElementById","hiddenResponsiveState","didRunCompatibilityModeForSession","didDoInitialNavbarClose","page","displayFromElement","element","dataset","pageTarget","textViewTitle","innerText","init","navButton","addEventListener","navCollapseButton","window","reflow","shouldUseCompatibilityMode","console","debug","setTimeout","collapsed","textView","getElementsByName","children","innerWidth","test","navigator","userAgent","MimicoShell"],"mappings":"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","file":"site.e94bdf83.map","sourceRoot":"..","sourcesContent":["if (!Array.from) {\n    Array.from = (array) => {\n        const newArray = [];\n        for (let i = 0; i < array.length; i++) {\n            newArray.push(array[i]);\n        }\n        return newArray;\n    };\n}\nconst _has_grid = CSS.supports(\"display\", \"grid\");\nconst _display_mode = _has_grid ? \"grid\" : \"flex\";\nif (!_has_grid) {\n    document.body.classList.add(\"no-grid\");\n}\n(() => {\n    const resetPageView = () => {\n        for (let view of suite.textViews) {\n            view.style.display = \"none\";\n        }\n    }\n    const resetNavButtons = () => {\n        for (let view of suite.navButtons) {\n            view.classList.remove(\"secondary-active\");\n        }\n    }\n    const resetResponsiveNav = () => {\n        suite.navIsCollapsed = suite.viewportWidth < 750;\n    }\n    const toggleExplorer = (hidden) => document.getElementById(\"explorer\").style.display = hidden ? \"none\" : _display_mode;\n    let hiddenResponsiveState = false;\n    let didRunCompatibilityModeForSession = false;\n    let didDoInitialNavbarClose = false;\n    const suite = {\n        /**\n         * Switch to a given page\n         * @param {string} page page id\n         */\n        display(page) {\n            resetPageView();\n            document.getElementById(page).style.display = _display_mode;\n        },\n        /**\n         * Display a page using a navbar element\n         * @param {Element} element \n         */\n        displayFromElement(element) {\n            this.display(element.dataset.pageTarget);\n            resetNavButtons();\n            element.classList.add(\"secondary-active\");\n            this.textViewTitle.innerText = element.innerText;\n        },\n        init() {\n            resetPageView();\n            resetNavButtons();\n            this.displayFromElement(this.navButtons[0]);\n            for (let navButton of this.navButtons) {\n                navButton.addEventListener(\"click\", event => this.displayFromElement(navButton));\n            }\n            this.navCollapseButton.addEventListener(\"click\", () => {\n                this.navIsCollapsed = !this.navIsCollapsed;\n                hiddenResponsiveState = this.navIsCollapsed;\n            });\n            window.addEventListener(\"resize\", () => this.reflow());\n            this.reflow();\n        },\n        reflow() {\n            if (this.viewportWidth >= 750) {\n                if (this.navIsCollapsed) {\n                    this.navIsCollapsed = false;\n                }\n                didRunCompatibilityModeForSession = false;\n                didDoInitialNavbarClose = false;\n            }\n            if (!this.navIsCollapsed && this.viewportWidth < 750) {\n                if (!didDoInitialNavbarClose) {\n                    this.navIsCollapsed = true;\n                    didDoInitialNavbarClose = true;\n                }\n                if (hiddenResponsiveState) {\n                    this.navIsCollapsed = true;\n                }\n                if (this.shouldUseCompatibilityMode && !didRunCompatibilityModeForSession) {\n                    console.debug(\"Running compatibility reflow\");\n                    this.navIsCollapsed = !this.navIsCollapsed;\n                    setTimeout(() => this.navIsCollapsed = !this.navIsCollapsed, 0);\n                    didRunCompatibilityModeForSession = true;\n                }\n            }\n        },\n        get navIsCollapsed() {\n            return document.getElementById(\"explorer\").style.display === \"none\";\n        },\n        set navIsCollapsed(collapsed) {\n            toggleExplorer(collapsed);\n            this.textView.classList[collapsed ? \"add\" : \"remove\"](\"text-view-max\");\n        },\n        get textViews() {\n            return Array.from(document.getElementsByName(\"text-view\"));\n        },\n        get navButtons() {\n            return Array.from(document.getElementById(\"explorer-items\").children);\n        },\n        get textViewTitle() {\n            return document.getElementById(\"tvt-wrap\");\n        },\n        get textView() {\n            return document.getElementById(\"text-view\");\n        },\n        get viewportWidth() {\n            return window.innerWidth;\n        },\n        get navCollapseButton() {\n            return document.getElementById(\"nav-burger\");\n        },\n        get shouldUseCompatibilityMode() {\n            return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n        }\n    };\n    window.MimicoShell = suite;\n    suite.init();\n})();"]}